library(treeX)
}
# VERSION CONTROL
{
version <- "1.0"
pastPath <- getwd()
setwd("M:/_R_WORK/treeX/")
document()
now <- Sys.time()
versionString <- paste0(version, ".",format(now, "%y"),
".",format(now, "%m"),format(now, "%d"))
dc <- list(Package = "treeX",
Title = paste0("Individual Tree Extraction of Ground-Based Point Clouds",
""),
Description = paste0("Perform tree detection, instance segmentation and automatic measurements of individual trees in LiDAR point clouds."),
`Authors@R` = paste0("person(given = \"Andreas\", family = \"Tockner\", role = c(\"aut\", \"cre\"),",
" email = \"andreas.tockner@boku.ac.at\",",
" comment = c(ORCID = \"0000-0001-6833-6713\"))"),
Version = versionString)
use_description(fields = dc)
use_gpl3_license()
# Dependencies
{
usethis::use_data_table()
usethis::use_package("lidR", type = "Depends")
usethis::use_package("VoxR", type = "Depends")
usethis::use_package("TreeLS", type = "Depends")
usethis::use_package("spatstat", type = "Depends")
usethis::use_package("sf", type = "Depends")
usethis::use_package("RANN", type = "Depends")
usethis::use_package("conicfit", type = "Depends")
usethis::use_package("alphashape3d", type = "Depends")
usethis::use_package("alphahull", type = "Depends")
usethis::use_package("plotrix", type = "Depends")
usethis::use_package("dbscan", type = "Depends")
usethis::use_package("Metrics", type = "Depends") # for bias and rmsd, maybe?
usethis::use_package("doParallel", type = "Depends")
usethis::use_package("ks", type = "Depends")
usethis::use_package("edci", type = "Depends")
usethis::use_package("dismo", type = "Depends")
}
setwd(pastPath)
}
## QUICKY INSTALLER ###
{
#pkgload::unload()
try(detach("package:treeX", unload=TRUE))
#gc()
library(devtools)
library(roxygen2)
#try(remove.packages("treeX"))
install("M:/_R_WORK/treeX/", dependencies = F, quick = T)
#withr::with_libpaths("F:/mylib/", install("M:/_R_WORK/treeX/", dependencies = F, quick = T))
library(treeX)
}
## QUICKY INSTALLER ###
{
#pkgload::unload()
try(detach("package:treeX", unload=TRUE))
#gc()
library(devtools)
library(roxygen2)
#try(remove.packages("treeX"))
install("M:/_R_WORK/treeX/", dependencies = F, quick = T)
#withr::with_libpaths("F:/mylib/", install("M:/_R_WORK/treeX/", dependencies = F, quick = T))
library(treeX)
}
## QUICKY INSTALLER ###
{
#pkgload::unload()
try(detach("package:treeX", unload=TRUE))
#gc()
library(devtools)
library(roxygen2)
#try(remove.packages("treeX"))
install("M:/_R_WORK/treeX/", dependencies = F, quick = T)
#withr::with_libpaths("F:/mylib/", install("M:/_R_WORK/treeX/", dependencies = F, quick = T))
library(treeX)
}
# VERSION CONTROL
{
version <- "1.0"
pastPath <- getwd()
setwd("M:/_R_WORK/treeX/")
document()
now <- Sys.time()
versionString <- paste0(version, ".",format(now, "%y"),
".",format(now, "%m"),format(now, "%d"))
dc <- list(Package = "treeX",
Title = paste0("Individual Tree Extraction of Ground-Based Point Clouds",
""),
Description = paste0("Perform tree detection, instance segmentation and automatic measurements of individual trees in LiDAR point clouds."),
`Authors@R` = paste0("person(given = \"Andreas\", family = \"Tockner\", role = c(\"aut\", \"cre\"),",
" email = \"andreas.tockner@boku.ac.at\",",
" comment = c(ORCID = \"0000-0001-6833-6713\"))"),
Version = versionString)
use_description(fields = dc)
use_gpl3_license()
# Dependencies
{
usethis::use_data_table()
usethis::use_package("lidR", type = "Depends")
usethis::use_package("VoxR", type = "Depends")
usethis::use_package("TreeLS", type = "Depends")
usethis::use_package("spatstat", type = "Depends")
usethis::use_package("sf", type = "Depends")
usethis::use_package("RANN", type = "Depends")
usethis::use_package("conicfit", type = "Depends")
usethis::use_package("alphashape3d", type = "Depends")
usethis::use_package("alphahull", type = "Depends")
usethis::use_package("plotrix", type = "Depends")
usethis::use_package("dbscan", type = "Depends")
usethis::use_package("Metrics", type = "Depends") # for bias and rmsd, maybe?
usethis::use_package("doParallel", type = "Depends")
usethis::use_package("ks", type = "Depends")
usethis::use_package("edci", type = "Depends")
usethis::use_package("dismo", type = "Depends")
}
setwd(pastPath)
}
## QUICKY INSTALLER ###
{
#pkgload::unload()
try(detach("package:treeX", unload=TRUE))
#gc()
library(devtools)
library(roxygen2)
#try(remove.packages("treeX"))
install("M:/_R_WORK/treeX/", dependencies = F, quick = T)
#withr::with_libpaths("F:/mylib/", install("M:/_R_WORK/treeX/", dependencies = F, quick = T))
library(treeX)
}
.libPaths()
# VERSION CONTROL
{
version <- "1.0"
pastPath <- getwd()
setwd("M:/_R_WORK/treeX/")
document()
now <- Sys.time()
versionString <- paste0(version, ".",format(now, "%y"),
".",format(now, "%m"),format(now, "%d"))
dc <- list(Package = "treeX",
Title = paste0("Individual Tree Extraction of Ground-Based Point Clouds",
""),
Description = paste0("Perform tree detection, instance segmentation and automatic measurements of individual trees in LiDAR point clouds."),
`Authors@R` = paste0("person(given = \"Andreas\", family = \"Tockner\", role = c(\"aut\", \"cre\"),",
" email = \"andreas.tockner@boku.ac.at\",",
" comment = c(ORCID = \"0000-0001-6833-6713\"))"),
Version = versionString)
use_description(fields = dc)
use_gpl3_license()
# Dependencies
{
usethis::use_data_table()
usethis::use_package("lidR", type = "Depends")
usethis::use_package("VoxR", type = "Depends")
usethis::use_package("TreeLS", type = "Depends")
usethis::use_package("spatstat", type = "Depends")
usethis::use_package("sf", type = "Depends")
usethis::use_package("RANN", type = "Depends")
usethis::use_package("conicfit", type = "Depends")
usethis::use_package("alphashape3d", type = "Depends")
usethis::use_package("alphahull", type = "Depends")
usethis::use_package("plotrix", type = "Depends")
usethis::use_package("dbscan", type = "Depends")
usethis::use_package("Metrics", type = "Depends") # for bias and rmsd, maybe?
usethis::use_package("doParallel", type = "Depends")
usethis::use_package("ks", type = "Depends")
#usethis::use_package("edci", type = "Depends")
usethis::use_package("dismo", type = "Depends")
}
setwd(pastPath)
}
## QUICKY INSTALLER ###
{
#pkgload::unload()
try(detach("package:treeX", unload=TRUE))
#gc()
library(devtools)
library(roxygen2)
#try(remove.packages("treeX"))
install("M:/_R_WORK/treeX/", dependencies = F, quick = T)
#withr::with_libpaths("F:/mylib/", install("M:/_R_WORK/treeX/", dependencies = F, quick = T))
library(treeX)
}
# VERSION CONTROL
{
version <- "1.0"
pastPath <- getwd()
setwd("M:/_R_WORK/treeX/")
document()
now <- Sys.time()
versionString <- paste0(version, ".",format(now, "%y"),
".",format(now, "%m"),format(now, "%d"))
dc <- list(Package = "treeX",
Title = paste0("Individual Tree Extraction of Ground-Based Point Clouds",
""),
Description = paste0("Perform tree detection, instance segmentation and automatic measurements of individual trees in LiDAR point clouds."),
`Authors@R` = paste0("person(given = \"Andreas\", family = \"Tockner\", role = c(\"aut\", \"cre\"),",
" email = \"andreas.tockner@boku.ac.at\",",
" comment = c(ORCID = \"0000-0001-6833-6713\"))"),
Version = versionString)
use_description(fields = dc)
use_gpl3_license()
# Dependencies
{
usethis::use_data_table()
usethis::use_package("lidR", type = "Depends")
usethis::use_package("VoxR", type = "Depends")
usethis::use_package("TreeLS", type = "Depends")
usethis::use_package("spatstat", type = "Depends")
usethis::use_package("sf", type = "Depends")
usethis::use_package("RANN", type = "Depends")
usethis::use_package("conicfit", type = "Depends")
usethis::use_package("alphashape3d", type = "Depends")
usethis::use_package("alphahull", type = "Depends")
usethis::use_package("plotrix", type = "Depends")
usethis::use_package("dbscan", type = "Depends")
usethis::use_package("Metrics", type = "Depends") # for bias and rmsd, maybe?
usethis::use_package("doParallel", type = "Depends")
usethis::use_package("ks", type = "Depends")
#usethis::use_package("edci", type = "Depends")
usethis::use_package("dismo", type = "Depends")
}
setwd(pastPath)
}
# VERSION CONTROL
{
version <- "1.0"
pastPath <- getwd()
setwd("M:/_R_WORK/treeX/")
document()
now <- Sys.time()
versionString <- paste0(version, ".",format(now, "%y"),
".",format(now, "%m"),format(now, "%d"))
dc <- list(Package = "treeX",
Title = paste0("Individual Tree Extraction of Ground-Based Point Clouds",
""),
Description = paste0("Perform tree detection, instance segmentation and automatic measurements of individual trees in LiDAR point clouds."),
`Authors@R` = paste0("person(given = \"Andreas\", family = \"Tockner\", role = c(\"aut\", \"cre\"),",
" email = \"andreas.tockner@boku.ac.at\",",
" comment = c(ORCID = \"0000-0001-6833-6713\"))"),
Version = versionString)
use_description(fields = dc)
use_gpl3_license()
# Dependencies
{
usethis::use_data_table()
usethis::use_package("lidR", type = "Depends")
usethis::use_package("VoxR", type = "Depends")
usethis::use_package("TreeLS", type = "Depends")
usethis::use_package("spatstat", type = "Depends")
usethis::use_package("sf", type = "Depends")
usethis::use_package("RANN", type = "Depends")
usethis::use_package("conicfit", type = "Depends")
usethis::use_package("alphashape3d", type = "Depends")
usethis::use_package("alphahull", type = "Depends")
usethis::use_package("plotrix", type = "Depends")
usethis::use_package("dbscan", type = "Depends")
usethis::use_package("Metrics", type = "Depends") # for bias and rmsd, maybe?
usethis::use_package("doParallel", type = "Depends")
usethis::use_package("ks", type = "Depends")
#usethis::use_package("edci", type = "Depends")
usethis::use_package("dismo", type = "Depends")
}
setwd(pastPath)
}
# VERSION CONTROL
{
version <- "1.0"
pastPath <- getwd()
setwd("M:/_R_WORK/treeX/")
document()
now <- Sys.time()
versionString <- paste0(version, ".",format(now, "%y"),
".",format(now, "%m"),format(now, "%d"))
dc <- list(Package = "treeX",
Title = paste0("Individual Tree Extraction of Ground-Based Point Clouds",
""),
Description = paste0("Perform tree detection, instance segmentation and automatic measurements of individual trees in LiDAR point clouds."),
`Authors@R` = paste0("person(given = \"Andreas\", family = \"Tockner\", role = c(\"aut\", \"cre\"),",
" email = \"andreas.tockner@boku.ac.at\",",
" comment = c(ORCID = \"0000-0001-6833-6713\"))"),
Version = versionString)
use_description(fields = dc)
use_gpl3_license()
# Dependencies
{
usethis::use_data_table()
usethis::use_package("lidR", type = "Depends")
usethis::use_package("VoxR", type = "Depends")
usethis::use_package("TreeLS", type = "Depends")
usethis::use_package("spatstat", type = "Depends")
usethis::use_package("sf", type = "Depends")
usethis::use_package("RANN", type = "Depends")
usethis::use_package("conicfit", type = "Depends")
usethis::use_package("alphashape3d", type = "Depends")
usethis::use_package("alphahull", type = "Depends")
usethis::use_package("plotrix", type = "Depends")
usethis::use_package("dbscan", type = "Depends")
usethis::use_package("Metrics", type = "Depends") # for bias and rmsd, maybe?
usethis::use_package("doParallel", type = "Depends")
usethis::use_package("ks", type = "Depends")
#usethis::use_package("edci", type = "Depends")
usethis::use_package("dismo", type = "Depends")
}
setwd(pastPath)
}
#gc()
library(devtools)
library(roxygen2)
# VERSION CONTROL
{
version <- "1.0"
pastPath <- getwd()
setwd("M:/_R_WORK/treeX/")
document()
now <- Sys.time()
versionString <- paste0(version, ".",format(now, "%y"),
".",format(now, "%m"),format(now, "%d"))
dc <- list(Package = "treeX",
Title = paste0("Individual Tree Extraction of Ground-Based Point Clouds",
""),
Description = paste0("Perform tree detection, instance segmentation and automatic measurements of individual trees in LiDAR point clouds."),
`Authors@R` = paste0("person(given = \"Andreas\", family = \"Tockner\", role = c(\"aut\", \"cre\"),",
" email = \"andreas.tockner@boku.ac.at\",",
" comment = c(ORCID = \"0000-0001-6833-6713\"))"),
Version = versionString)
use_description(fields = dc)
use_gpl3_license()
# Dependencies
{
usethis::use_data_table()
usethis::use_package("lidR", type = "Depends")
usethis::use_package("VoxR", type = "Depends")
usethis::use_package("TreeLS", type = "Depends")
usethis::use_package("spatstat", type = "Depends")
usethis::use_package("sf", type = "Depends")
usethis::use_package("RANN", type = "Depends")
usethis::use_package("conicfit", type = "Depends")
usethis::use_package("alphashape3d", type = "Depends")
usethis::use_package("alphahull", type = "Depends")
usethis::use_package("plotrix", type = "Depends")
usethis::use_package("dbscan", type = "Depends")
usethis::use_package("Metrics", type = "Depends") # for bias and rmsd, maybe?
usethis::use_package("doParallel", type = "Depends")
usethis::use_package("ks", type = "Depends")
#usethis::use_package("edci", type = "Depends")
usethis::use_package("dismo", type = "Depends")
}
setwd(pastPath)
}
## QUICKY INSTALLER ###
{
#pkgload::unload()
try(detach("package:treeX", unload=TRUE))
#gc()
library(devtools)
library(roxygen2)
#try(remove.packages("treeX"))
install("M:/_R_WORK/treeX/", dependencies = F, quick = T)
#withr::with_libpaths("F:/mylib/", install("M:/_R_WORK/treeX/", dependencies = F, quick = T))
library(treeX)
}
#install.packages("spatstat")
#install.packages("Morpho")
library(spatstat) # for all ppp operations
library(Morpho) # for computeTransform() and applyTransform()
library(RANN) # for nn2()
library(raster) # for raster() load dtm
library(data.table) # for transforming the dtm
library(alphahull) # for reducing the dtm overlap area by 10 m inwards
outDir <- "D:/DF24/KE_merged/match_local_fine_KB/out/"
if(!dir.exists(outDir)) dir.create(outDir, recursive = T)
## QUICKY INSTALLER ###
{
#pkgload::unload()
try(detach("package:treeX", unload=TRUE))
#gc()
library(devtools)
library(roxygen2)
#try(remove.packages("treeX"))
install("M:/_R_WORK/treeX/", dependencies = F, quick = T)
#withr::with_libpaths("F:/mylib/", install("M:/_R_WORK/treeX/", dependencies = F, quick = T))
library(treeX)
}
git_sitrep()
usethis::git_sitrep()
suppressPackageStartupMessages(library("dae", character.only = T))
#suppressPackageStartupMessages(library("VoxR", character.only = T))
#suppressPackageStartupMessages(library("spatialEco", character.only = T))
#suppressPackageStartupMessages(library("Rdistance", character.only = T))
#suppressPackageStartupMessages(library("edci", character.only = T))
{
tryCatch(suppressPackageStartupMessages(library("edci")))
cat("Ok")}
diameterBeast <- function(fileFinder, dbhPath, ipad = FALSE, allFiles = FALSE, nr_cores = 0,
referenced = FALSE, bushPreparation = FALSE, filterSOR = FALSE, fast = TRUE,
cutWindow = c(-1000, -1000, 2000), silent = FALSE, dirPath = paste0(getwd(), "/")){
start <- Sys.time()
cat("\nStarting diameterBeast()\n")
cat("Current time is", format(Sys.time(), "%H:%M:%S"), "\n")
path.output.cluster.end <- paste0(dbhPath, "fineCluster/")
path.output.cluster.endgraph <- paste0(dbhPath, "graphSlice/")
# if you had lost sliVox, read in from paste0(dbhPath, "slice_cluster.laz")
#sliVoxSafe <- sliVox
XL <- cutWindow[1]
YL <- cutWindow[2]
width <- cutWindow[3]
if(sum(cutWindow == c(-1000, -1000, 2000)) == 3){
sliVox <- sliVox
cat("No cutting because of no cutWindow setting!\n")
} else {
sliVox <- filter_poi(sliVox, X > XL, X < XL + width, Y > YL, Y < YL + width)
# CUTTING IS ALREADY DONE ABOVE
}
#tab.neu <- cluster_tab
cat(fileFinder, " - Processing", length(unique(sliVox@data$cluster)), "clusters",
"<: from", min(sliVox@data$cluster), "to",  max(sliVox@data$cluster), ":>\n")
#tab.neu <- tab.neu[tab.neu$cluster!=0, ] #alle weg die Noise sind
u.grenzen.vec <- c(seq(1.0, 2.625, 0.125)) #Grenzen fuer BHD - Findung
if(ipad){
u.grenzen.vec <- c(seq(0.2, 1.825, 0.125)) #Grenzen fuer BHD - Findung #alt TLS/PLS: seq(1.0, 2.625, 0.125)
}
cluster.vec <- unique(sliVox@data$cluster)
#cluster.vec <- cluster.vec[2:12]
z.breite <- 0.15 #Breite der Schicht fuer circle/ell fit: 0.15
#laenge.tab <- data.frame(id = Plot.ID.i, laenge = length(cluster.vec))
i=1
j=1
suppressPackageStartupMessages(library("rgl", character.only = T))
suppressPackageStartupMessages(library("conicfit", character.only = T))
timePar1 <- Sys.time()
if(nr_cores == 0){
cat("Automatic number of core setting:\n   ")
nr_cores <- detectCores()
cat(nr_cores, "cores available - max ")
nr_cores <- nr_cores - 1
maxCores <- 10
cat(maxCores, "cores recommended.\n")
if(maxCores < 1){
maxCores <- 1
}
if(maxCores <=  nr_cores){
nr_cores <- maxCores
}
#cat("\n")
# if(las@header@PHB$`Number of point records` > 90000000){
#   cat("LAS File is too big, reducing back to 5 cores!")
#   if(nr_cores > 5){
#     nr_cores <- 5
#   }
# }
}
if(nr_cores > length(cluster.vec)){
nr_cores <- length(cluster.vec)
}
cl <- makeCluster(nr_cores)#, outfile="")
registerDoParallel(cl)
#which(cluster.vec==221)
cat(fileFinder, " - Going parallel on", nr_cores, "cores.\n\n")
foreach(i=1:length(cluster.vec), .errorhandling = 'remove') %dopar% {
#   for(i in 1:length(cluster.vec)){
# ERRORS INDUCED BY LEAVING EMPTY BRACKETS OVER WHOLE PARALLEL ROUTINE! ###
suppressPackageStartupMessages(library("doParallel", character.only = T))
suppressPackageStartupMessages(library("data.table", character.only = T))
suppressPackageStartupMessages(library("ADPclust", character.only = T))
suppressPackageStartupMessages(library("densityClust", character.only = T))
#suppressPackageStartupMessages(library("dae", character.only = T))
suppressPackageStartupMessages(library("plyr", character.only = T))
suppressPackageStartupMessages(library("spatstat", character.only = T))
suppressPackageStartupMessages(library("alphahull", character.only = T))
suppressPackageStartupMessages(library("RANN", character.only = T))
suppressPackageStartupMessages(library("flexclust", character.only = T))
suppressPackageStartupMessages(library("sp", character.only = T))
suppressPackageStartupMessages(library("matrixStats", character.only = T))
#suppressPackageStartupMessages(library("Distance", character.only = T))
suppressPackageStartupMessages(library("lmfor", character.only = T))
suppressPackageStartupMessages(library("rgl", character.only = T))
suppressPackageStartupMessages(library("conicfit", character.only = T))
suppressPackageStartupMessages(library("MASS", character.only = T))
suppressPackageStartupMessages(library("igraph", character.only = T))
suppressPackageStartupMessages(library("geosphere", character.only = T))
suppressPackageStartupMessages(library("pracma", character.only = T))
suppressPackageStartupMessages(library("DescTools", character.only = T))
suppressPackageStartupMessages(library("mgcv", character.only = T))
suppressPackageStartupMessages(library("recexcavAAR", character.only = T))
suppressPackageStartupMessages(library("raster", character.only = T))
#suppressPackageStartupMessages(library("rlas", character.only = T))
suppressPackageStartupMessages(library("lidR", character.only = T))
suppressPackageStartupMessages(library("TreeLS", character.only = T))
suppressPackageStartupMessages(library("dbscan", character.only = T))
#suppressPackageStartupMessages(library("VoxR", character.only = T))
#suppressPackageStartupMessages(library("spatialEco", character.only = T))
#suppressPackageStartupMessages(library("Rdistance", character.only = T))
#suppressPackageStartupMessages(library("edci", character.only = T))
{
tryCatch(suppressPackageStartupMessages(library("edci")), error = function(e))
tryCatch(suppressPackageStartupMessages(library("edci")),
error = function(e){})
cat("Ok")
#suppressPackageStartupMessages(library("VoxR", character.only = T))
#suppressPackageStartupMessages(library("spatialEco", character.only = T))
#suppressPackageStartupMessages(library("Rdistance", character.only = T))
#suppressPackageStartupMessages(library("edci", character.only = T))
{
tryCatch(suppressPackageStartupMessages(library("edci")),
error = function(e){})
cat("Ok")
}
install.packages("ks", dep = T)
