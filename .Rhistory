for(i in c(1:12)){
trees1_1 <- trees1[trees1$plot == i,]
nowTrees <- trees1_1
plot(nowTrees$Y ~nowTrees$X, asp = 1,
cex = nowTrees$dbh12/20, col = as.factor(nowTrees$subplot), main = paste0("Plot", i))
table(trees1$plot)
}
for(i in c(1:5)){
trees8_sub <- trees1_1[nowTrees$subplot == i,]
plot(trees8_sub$Y ~trees8_sub$X, asp = 1,
cex = trees8_sub$dbh12/20, col = as.factor(trees8_sub$subplot), main = paste0("Plot 1-", i))
}
plot(nowTrees$Y ~nowTrees$X, asp = 1,
cex = nowTrees$dbh12/20, col = as.factor(nowTrees$subplot), main = paste0("Plot", i))
for(i in c(1:12)){
trees1_1 <- trees1[trees1$plot == i,]
nowTrees <- trees1_1
plot(nowTrees$Y ~nowTrees$X, asp = 1,
cex = nowTrees$dbh12/20, col = as.factor(nowTrees$subplot), main = paste0("Plot", i))
table(trees1$plot)
}
plot(treesPL$y ~treesPL$x, asp = 1, cex = treesPL$diam_2019/100, col = treesPL$plot)
treeList <- read.csv2("C:/Users/TocknerAndreas/Downloads/Tree_positions_final.csv")
summary(treeList)
treeList$z[is.na(treeList$z),]
treeList$z[is.na(treeList$z)]
treeList$z[is.na(treeList$z)] <- 0
summary(treeList)
write.csv2(treeList, "D:/tree_positions_final_noNA.csv")
inTrees <- read.table("D:/JAUCH23/jauch_trees_all_20240124_090924_USER.txt", header = T)
table(inTrees$species)
deadTrees <- inTrees[is.element(inTrees$species, c("Et", "Ft", "Lt")),]
hist(deadTrees$dbh)
strongDead <- deadTrees[deadTrees$dbh >= 40,]
View(strongDead)
plot(inTrees$x, inTrees$y, asp = 1, cex = inTrees$dbh/200)
plot(inTrees$x, inTrees$y, asp = 1, cex = inTrees$dbh/200, col = inTrees$species)
plot(inTrees$x, inTrees$y, asp = 1, cex = inTrees$dbh/200, col = as.factor(inTrees$species))
points(strongDead$x, strongDead$y, cex = inTrees$dbh/100, col = "red")
points(strongDead$x, strongDead$y, cex = inTrees$dbh/100, fill = "red")
points(strongDead$x, strongDead$y, cex = inTrees$dbh/100, col = "red", pch = 16)
thickTrees <- inTrees[inTrees$dbh >= 60,]
thickTrees <- inTrees[inTrees$dbh >= 60,]
points(thickTrees$x, thickTrees$y, cex = thickTrees$dbh/100, col = "blue", pch = 16)
plot(inTrees$x, inTrees$y, asp = 1, cex = inTrees$dbh/200, col = as.factor(inTrees$species))
thickTrees <- inTrees[inTrees$dbh >= 70,]
points(thickTrees$x, thickTrees$y, cex = thickTrees$dbh/100, col = "blue", pch = 16)
plot(inTrees$x, inTrees$y, asp = 1, cex = inTrees$dbh/200, col = as.factor(inTrees$species))
thickTrees <- inTrees[inTrees$dbh >= 80,]
points(thickTrees$x, thickTrees$y, cex = thickTrees$dbh/100, col = "blue", pch = 16)
table(inTrees$species)
table(inTrees$species, useNA = T)
table(inTrees$species, useNA = "always")
View(thickTrees)
thickTrees <- inTrees[inTrees$dbh >= 70,]
thickTrees <- inTrees[inTrees$dbh >= 70,]
thickTrees <- thickTrees[is.element(thickTrees$randomCol, c("grenzbaum", "kronleuchter", "")),]
plot(inTrees$x, inTrees$y, asp = 1, cex = inTrees$dbh/200, col = as.factor(inTrees$species))
points(strongDead$x, strongDead$y, cex = strongDead$dbh/100, col = "red", pch = 16)
points(thickTrees$x, thickTrees$y, cex = thickTrees$dbh/100, col = "blue", pch = 16)
.libPaths()
## QUICKY INSTALLER ###
{
#pkgload::unload()
try(detach("package:treeX", unload=TRUE))
#gc()
library(devtools)
library(roxygen2)
#try(remove.packages("treeX"))
install("M:/_R_WORK/treeX/", dependencies = F, quick = T)
#withr::with_libpaths("F:/mylib/", install("M:/_R_WORK/treeX/", dependencies = F, quick = T))
library(treeX)
}
.libPaths()
# VERSION CONTROL
{
version <- "1.0"
pastPath <- getwd()
setwd("M:/_R_WORK/treeX/")
document()
now <- Sys.time()
versionString <- paste0(version, ".",format(now, "%y"),
".",format(now, "%m"),format(now, "%d"))
dc <- list(Package = "treeX",
Title = paste0("Individual Tree Extraction of Ground-Based Point Clouds",
""),
Description = paste0("Perform tree detection, instance segmentation and automatic measurements of individual trees in LiDAR point clouds."),
`Authors@R` = paste0("person(given = \"Andreas\", family = \"Tockner\", role = c(\"aut\", \"cre\"),",
" email = \"andreas.tockner@boku.ac.at\",",
" comment = c(ORCID = \"0000-0001-6833-6713\"))"),
Version = versionString)
use_description(fields = dc)
use_gpl3_license()
# Dependencies
{
usethis::use_data_table()
usethis::use_package("lidR", type = "Depends")
usethis::use_package("VoxR", type = "Depends")
usethis::use_package("TreeLS", type = "Depends")
usethis::use_package("spatstat", type = "Depends")
usethis::use_package("sf", type = "Depends")
usethis::use_package("RANN", type = "Depends")
usethis::use_package("conicfit", type = "Depends")
usethis::use_package("alphashape3d", type = "Depends")
usethis::use_package("alphahull", type = "Depends")
usethis::use_package("plotrix", type = "Depends")
usethis::use_package("dbscan", type = "Depends")
usethis::use_package("Metrics", type = "Depends") # for bias and rmsd, maybe?
usethis::use_package("doParallel", type = "Depends")
usethis::use_package("ks", type = "Depends")
usethis::use_package("edci", type = "Depends")
usethis::use_package("dismo", type = "Depends")
}
setwd(pastPath)
}
## QUICKY INSTALLER ###
{
#pkgload::unload()
try(detach("package:treeX", unload=TRUE))
#gc()
library(devtools)
library(roxygen2)
#try(remove.packages("treeX"))
install("M:/_R_WORK/treeX/", dependencies = F, quick = T)
#withr::with_libpaths("F:/mylib/", install("M:/_R_WORK/treeX/", dependencies = F, quick = T))
library(treeX)
}
# VERSION CONTROL
{
version <- "1.0"
pastPath <- getwd()
setwd("M:/_R_WORK/treeX/")
document()
now <- Sys.time()
versionString <- paste0(version, ".",format(now, "%y"),
".",format(now, "%m"),format(now, "%d"))
dc <- list(Package = "treeX",
Title = paste0("Individual Tree Extraction of Ground-Based Point Clouds",
""),
Description = paste0("Perform tree detection, instance segmentation and automatic measurements of individual trees in LiDAR point clouds."),
`Authors@R` = paste0("person(given = \"Andreas\", family = \"Tockner\", role = c(\"aut\", \"cre\"),",
" email = \"andreas.tockner@boku.ac.at\",",
" comment = c(ORCID = \"0000-0001-6833-6713\"))"),
Version = versionString)
use_description(fields = dc)
use_gpl3_license()
# Dependencies
{
usethis::use_data_table()
usethis::use_package("lidR", type = "Depends")
usethis::use_package("VoxR", type = "Depends")
usethis::use_package("TreeLS", type = "Depends")
usethis::use_package("spatstat", type = "Depends")
usethis::use_package("sf", type = "Depends")
usethis::use_package("RANN", type = "Depends")
usethis::use_package("conicfit", type = "Depends")
usethis::use_package("alphashape3d", type = "Depends")
usethis::use_package("alphahull", type = "Depends")
usethis::use_package("plotrix", type = "Depends")
usethis::use_package("dbscan", type = "Depends")
usethis::use_package("Metrics", type = "Depends") # for bias and rmsd, maybe?
usethis::use_package("doParallel", type = "Depends")
usethis::use_package("ks", type = "Depends")
usethis::use_package("edci", type = "Depends")
usethis::use_package("dismo", type = "Depends")
}
setwd(pastPath)
}
## QUICKY INSTALLER ###
{
#pkgload::unload()
try(detach("package:treeX", unload=TRUE))
#gc()
library(devtools)
library(roxygen2)
#try(remove.packages("treeX"))
install("M:/_R_WORK/treeX/", dependencies = F, quick = T)
#withr::with_libpaths("F:/mylib/", install("M:/_R_WORK/treeX/", dependencies = F, quick = T))
library(treeX)
}
## QUICKY INSTALLER ###
{
#pkgload::unload()
try(detach("package:treeX", unload=TRUE))
#gc()
library(devtools)
library(roxygen2)
#try(remove.packages("treeX"))
install("M:/_R_WORK/treeX/", dependencies = F, quick = T)
#withr::with_libpaths("F:/mylib/", install("M:/_R_WORK/treeX/", dependencies = F, quick = T))
library(treeX)
}
## QUICKY INSTALLER ###
{
#pkgload::unload()
try(detach("package:treeX", unload=TRUE))
#gc()
library(devtools)
library(roxygen2)
#try(remove.packages("treeX"))
install("M:/_R_WORK/treeX/", dependencies = F, quick = T)
#withr::with_libpaths("F:/mylib/", install("M:/_R_WORK/treeX/", dependencies = F, quick = T))
library(treeX)
}
# VERSION CONTROL
{
version <- "1.0"
pastPath <- getwd()
setwd("M:/_R_WORK/treeX/")
document()
now <- Sys.time()
versionString <- paste0(version, ".",format(now, "%y"),
".",format(now, "%m"),format(now, "%d"))
dc <- list(Package = "treeX",
Title = paste0("Individual Tree Extraction of Ground-Based Point Clouds",
""),
Description = paste0("Perform tree detection, instance segmentation and automatic measurements of individual trees in LiDAR point clouds."),
`Authors@R` = paste0("person(given = \"Andreas\", family = \"Tockner\", role = c(\"aut\", \"cre\"),",
" email = \"andreas.tockner@boku.ac.at\",",
" comment = c(ORCID = \"0000-0001-6833-6713\"))"),
Version = versionString)
use_description(fields = dc)
use_gpl3_license()
# Dependencies
{
usethis::use_data_table()
usethis::use_package("lidR", type = "Depends")
usethis::use_package("VoxR", type = "Depends")
usethis::use_package("TreeLS", type = "Depends")
usethis::use_package("spatstat", type = "Depends")
usethis::use_package("sf", type = "Depends")
usethis::use_package("RANN", type = "Depends")
usethis::use_package("conicfit", type = "Depends")
usethis::use_package("alphashape3d", type = "Depends")
usethis::use_package("alphahull", type = "Depends")
usethis::use_package("plotrix", type = "Depends")
usethis::use_package("dbscan", type = "Depends")
usethis::use_package("Metrics", type = "Depends") # for bias and rmsd, maybe?
usethis::use_package("doParallel", type = "Depends")
usethis::use_package("ks", type = "Depends")
usethis::use_package("edci", type = "Depends")
usethis::use_package("dismo", type = "Depends")
}
setwd(pastPath)
}
## QUICKY INSTALLER ###
{
#pkgload::unload()
try(detach("package:treeX", unload=TRUE))
#gc()
library(devtools)
library(roxygen2)
#try(remove.packages("treeX"))
install("M:/_R_WORK/treeX/", dependencies = F, quick = T)
#withr::with_libpaths("F:/mylib/", install("M:/_R_WORK/treeX/", dependencies = F, quick = T))
library(treeX)
}
.libPaths()
# VERSION CONTROL
{
version <- "1.0"
pastPath <- getwd()
setwd("M:/_R_WORK/treeX/")
document()
now <- Sys.time()
versionString <- paste0(version, ".",format(now, "%y"),
".",format(now, "%m"),format(now, "%d"))
dc <- list(Package = "treeX",
Title = paste0("Individual Tree Extraction of Ground-Based Point Clouds",
""),
Description = paste0("Perform tree detection, instance segmentation and automatic measurements of individual trees in LiDAR point clouds."),
`Authors@R` = paste0("person(given = \"Andreas\", family = \"Tockner\", role = c(\"aut\", \"cre\"),",
" email = \"andreas.tockner@boku.ac.at\",",
" comment = c(ORCID = \"0000-0001-6833-6713\"))"),
Version = versionString)
use_description(fields = dc)
use_gpl3_license()
# Dependencies
{
usethis::use_data_table()
usethis::use_package("lidR", type = "Depends")
usethis::use_package("VoxR", type = "Depends")
usethis::use_package("TreeLS", type = "Depends")
usethis::use_package("spatstat", type = "Depends")
usethis::use_package("sf", type = "Depends")
usethis::use_package("RANN", type = "Depends")
usethis::use_package("conicfit", type = "Depends")
usethis::use_package("alphashape3d", type = "Depends")
usethis::use_package("alphahull", type = "Depends")
usethis::use_package("plotrix", type = "Depends")
usethis::use_package("dbscan", type = "Depends")
usethis::use_package("Metrics", type = "Depends") # for bias and rmsd, maybe?
usethis::use_package("doParallel", type = "Depends")
usethis::use_package("ks", type = "Depends")
#usethis::use_package("edci", type = "Depends")
usethis::use_package("dismo", type = "Depends")
}
setwd(pastPath)
}
## QUICKY INSTALLER ###
{
#pkgload::unload()
try(detach("package:treeX", unload=TRUE))
#gc()
library(devtools)
library(roxygen2)
#try(remove.packages("treeX"))
install("M:/_R_WORK/treeX/", dependencies = F, quick = T)
#withr::with_libpaths("F:/mylib/", install("M:/_R_WORK/treeX/", dependencies = F, quick = T))
library(treeX)
}
# VERSION CONTROL
{
version <- "1.0"
pastPath <- getwd()
setwd("M:/_R_WORK/treeX/")
document()
now <- Sys.time()
versionString <- paste0(version, ".",format(now, "%y"),
".",format(now, "%m"),format(now, "%d"))
dc <- list(Package = "treeX",
Title = paste0("Individual Tree Extraction of Ground-Based Point Clouds",
""),
Description = paste0("Perform tree detection, instance segmentation and automatic measurements of individual trees in LiDAR point clouds."),
`Authors@R` = paste0("person(given = \"Andreas\", family = \"Tockner\", role = c(\"aut\", \"cre\"),",
" email = \"andreas.tockner@boku.ac.at\",",
" comment = c(ORCID = \"0000-0001-6833-6713\"))"),
Version = versionString)
use_description(fields = dc)
use_gpl3_license()
# Dependencies
{
usethis::use_data_table()
usethis::use_package("lidR", type = "Depends")
usethis::use_package("VoxR", type = "Depends")
usethis::use_package("TreeLS", type = "Depends")
usethis::use_package("spatstat", type = "Depends")
usethis::use_package("sf", type = "Depends")
usethis::use_package("RANN", type = "Depends")
usethis::use_package("conicfit", type = "Depends")
usethis::use_package("alphashape3d", type = "Depends")
usethis::use_package("alphahull", type = "Depends")
usethis::use_package("plotrix", type = "Depends")
usethis::use_package("dbscan", type = "Depends")
usethis::use_package("Metrics", type = "Depends") # for bias and rmsd, maybe?
usethis::use_package("doParallel", type = "Depends")
usethis::use_package("ks", type = "Depends")
#usethis::use_package("edci", type = "Depends")
usethis::use_package("dismo", type = "Depends")
}
setwd(pastPath)
}
# VERSION CONTROL
{
version <- "1.0"
pastPath <- getwd()
setwd("M:/_R_WORK/treeX/")
document()
now <- Sys.time()
versionString <- paste0(version, ".",format(now, "%y"),
".",format(now, "%m"),format(now, "%d"))
dc <- list(Package = "treeX",
Title = paste0("Individual Tree Extraction of Ground-Based Point Clouds",
""),
Description = paste0("Perform tree detection, instance segmentation and automatic measurements of individual trees in LiDAR point clouds."),
`Authors@R` = paste0("person(given = \"Andreas\", family = \"Tockner\", role = c(\"aut\", \"cre\"),",
" email = \"andreas.tockner@boku.ac.at\",",
" comment = c(ORCID = \"0000-0001-6833-6713\"))"),
Version = versionString)
use_description(fields = dc)
use_gpl3_license()
# Dependencies
{
usethis::use_data_table()
usethis::use_package("lidR", type = "Depends")
usethis::use_package("VoxR", type = "Depends")
usethis::use_package("TreeLS", type = "Depends")
usethis::use_package("spatstat", type = "Depends")
usethis::use_package("sf", type = "Depends")
usethis::use_package("RANN", type = "Depends")
usethis::use_package("conicfit", type = "Depends")
usethis::use_package("alphashape3d", type = "Depends")
usethis::use_package("alphahull", type = "Depends")
usethis::use_package("plotrix", type = "Depends")
usethis::use_package("dbscan", type = "Depends")
usethis::use_package("Metrics", type = "Depends") # for bias and rmsd, maybe?
usethis::use_package("doParallel", type = "Depends")
usethis::use_package("ks", type = "Depends")
#usethis::use_package("edci", type = "Depends")
usethis::use_package("dismo", type = "Depends")
}
setwd(pastPath)
}
# VERSION CONTROL
{
version <- "1.0"
pastPath <- getwd()
setwd("M:/_R_WORK/treeX/")
document()
now <- Sys.time()
versionString <- paste0(version, ".",format(now, "%y"),
".",format(now, "%m"),format(now, "%d"))
dc <- list(Package = "treeX",
Title = paste0("Individual Tree Extraction of Ground-Based Point Clouds",
""),
Description = paste0("Perform tree detection, instance segmentation and automatic measurements of individual trees in LiDAR point clouds."),
`Authors@R` = paste0("person(given = \"Andreas\", family = \"Tockner\", role = c(\"aut\", \"cre\"),",
" email = \"andreas.tockner@boku.ac.at\",",
" comment = c(ORCID = \"0000-0001-6833-6713\"))"),
Version = versionString)
use_description(fields = dc)
use_gpl3_license()
# Dependencies
{
usethis::use_data_table()
usethis::use_package("lidR", type = "Depends")
usethis::use_package("VoxR", type = "Depends")
usethis::use_package("TreeLS", type = "Depends")
usethis::use_package("spatstat", type = "Depends")
usethis::use_package("sf", type = "Depends")
usethis::use_package("RANN", type = "Depends")
usethis::use_package("conicfit", type = "Depends")
usethis::use_package("alphashape3d", type = "Depends")
usethis::use_package("alphahull", type = "Depends")
usethis::use_package("plotrix", type = "Depends")
usethis::use_package("dbscan", type = "Depends")
usethis::use_package("Metrics", type = "Depends") # for bias and rmsd, maybe?
usethis::use_package("doParallel", type = "Depends")
usethis::use_package("ks", type = "Depends")
#usethis::use_package("edci", type = "Depends")
usethis::use_package("dismo", type = "Depends")
}
setwd(pastPath)
}
#gc()
library(devtools)
library(roxygen2)
# VERSION CONTROL
{
version <- "1.0"
pastPath <- getwd()
setwd("M:/_R_WORK/treeX/")
document()
now <- Sys.time()
versionString <- paste0(version, ".",format(now, "%y"),
".",format(now, "%m"),format(now, "%d"))
dc <- list(Package = "treeX",
Title = paste0("Individual Tree Extraction of Ground-Based Point Clouds",
""),
Description = paste0("Perform tree detection, instance segmentation and automatic measurements of individual trees in LiDAR point clouds."),
`Authors@R` = paste0("person(given = \"Andreas\", family = \"Tockner\", role = c(\"aut\", \"cre\"),",
" email = \"andreas.tockner@boku.ac.at\",",
" comment = c(ORCID = \"0000-0001-6833-6713\"))"),
Version = versionString)
use_description(fields = dc)
use_gpl3_license()
# Dependencies
{
usethis::use_data_table()
usethis::use_package("lidR", type = "Depends")
usethis::use_package("VoxR", type = "Depends")
usethis::use_package("TreeLS", type = "Depends")
usethis::use_package("spatstat", type = "Depends")
usethis::use_package("sf", type = "Depends")
usethis::use_package("RANN", type = "Depends")
usethis::use_package("conicfit", type = "Depends")
usethis::use_package("alphashape3d", type = "Depends")
usethis::use_package("alphahull", type = "Depends")
usethis::use_package("plotrix", type = "Depends")
usethis::use_package("dbscan", type = "Depends")
usethis::use_package("Metrics", type = "Depends") # for bias and rmsd, maybe?
usethis::use_package("doParallel", type = "Depends")
usethis::use_package("ks", type = "Depends")
#usethis::use_package("edci", type = "Depends")
usethis::use_package("dismo", type = "Depends")
}
setwd(pastPath)
}
## QUICKY INSTALLER ###
{
#pkgload::unload()
try(detach("package:treeX", unload=TRUE))
#gc()
library(devtools)
library(roxygen2)
#try(remove.packages("treeX"))
install("M:/_R_WORK/treeX/", dependencies = F, quick = T)
#withr::with_libpaths("F:/mylib/", install("M:/_R_WORK/treeX/", dependencies = F, quick = T))
library(treeX)
}
#install.packages("spatstat")
#install.packages("Morpho")
library(spatstat) # for all ppp operations
library(Morpho) # for computeTransform() and applyTransform()
library(RANN) # for nn2()
library(raster) # for raster() load dtm
library(data.table) # for transforming the dtm
library(alphahull) # for reducing the dtm overlap area by 10 m inwards
outDir <- "D:/DF24/KE_merged/match_local_fine_KB/out/"
if(!dir.exists(outDir)) dir.create(outDir, recursive = T)
## QUICKY INSTALLER ###
{
#pkgload::unload()
try(detach("package:treeX", unload=TRUE))
#gc()
library(devtools)
library(roxygen2)
#try(remove.packages("treeX"))
install("M:/_R_WORK/treeX/", dependencies = F, quick = T)
#withr::with_libpaths("F:/mylib/", install("M:/_R_WORK/treeX/", dependencies = F, quick = T))
library(treeX)
}
